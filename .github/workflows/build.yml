# .github/workflows/build.yml

name: build reverse_proxy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  get-build-info:
    runs-on: ubuntu-latest
    outputs:
      bulid_version: ${{ steps.tag.outputs.BUILD_VERSION }}
      build_time: ${{ steps.time.outputs.BUILD_TIME }}

    steps:
      - name: Get build version
        id: tag
        run: echo "BUILD_VERSION=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Store build timestamp
        id: time
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

  build-linux:
    runs-on: ubuntu-latest
    needs: get-build-info
    env:
      RUST_BACKTRACE: full
      BUILD_VERSION: ${{ needs.get-build-info.outputs.bulid_version }}
      BUILD_TIME: ${{ needs.get-build-info.outputs.build_time }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchains
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build for Linux
        run: |
          compile_target=${{ matrix.target }}
          if [[ "$compile_target" == *"aarch64"* ]]; then
            cargo install cross
            cross build --target ${{ matrix.target }} --release
          else
            cargo build --target ${{ matrix.target }} --release
          fi

      - name: Pack Linux artifacts
        run: |
          mkdir -p reverse_proxy
          cp target/${{ matrix.target }}/release/reverse_proxy reverse_proxy
          tar -czvf reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.tar.gz reverse_proxy

      - name: Upload Linux artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: reverse_proxy-${{ matrix.target }}
          path: reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.tar.gz

  build-macos:
    runs-on: macos-latest
    needs: get-build-info
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchains
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build for MacOS
        run: cargo build --target ${{ matrix.target }} --release

      - name: Pack MacOS artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p reverse_proxy
          cp target/${{ matrix.target }}/release/reverse_proxy reverse_proxy
          tar -czvf reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.tar.gz reverse_proxy

      - name: Upload MacOS artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: reverse_proxy-${{ matrix.target }}
          path: reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.tar.gz

  build-windows:
    runs-on: windows-latest
    needs: get-build-info
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchains
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build for Windows
        run: cargo build --target ${{ matrix.target }} --release

      - name: Pack Windows artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p reverse_proxy
          cp target\${{ matrix.target }}\release\reverse_proxy.exe reverse_proxy
          Compress-Archive -Path 'reverse_proxy\*' -DestinationPath "reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.zip"

      - name: Upload Windows artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: reverse_proxy-${{ matrix.target }}
          path: reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.zip

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [get-build-info, build-linux, build-macos, build-windows]
    strategy:
      matrix:
        target: [
          "x86_64-unknown-linux-musl",
          "aarch64-unknown-linux-musl",
          "x86_64-apple-darwin",
          "aarch64-apple-darwin",
          "x86_64-pc-windows-msvc",
        ]

    steps:
      - name: Download ${{ matrix.target }} artifacts
        uses: actions/download-artifact@v4
        with:
          name: reverse_proxy-${{ matrix.target }}

      - name: Upload Release Assets
        id: upload_release_asset
        uses: svenstaro/upload-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.get-build-info.outputs.bulid_version }}
          file: reverse_proxy-${{ needs.get-build-info.outputs.bulid_version }}-${{ matrix.target }}.*
          overwrite: true
          file_glob: true
